from crewai import Crew, Agent, Task
from baserow_handler import executar_acao
from openai_config import setup_openai
import json

setup_openai()

# Agente que normaliza comandos em linguagem natural para o formato ideal
normalizador = Agent(
    role="Normalizador de OS",
    goal="Transformar mensagens desorganizadas em um formato ideal para interpreta√ß√£o",
    backstory="Especialista em reescrever pedidos livres em uma estrutura compreens√≠vel e padronizada para o sistema de OS.",
    verbose=True
)

# Agente que interpreta comandos em linguagem natural
comandante = Agent(
    role="Comandante de OS",
    goal="Interpretar comandos em linguagem natural e converter em a√ß√µes estruturadas de OS",
    backstory="Agente inteligente que entende pedidos de gestores e identifica se √© para registrar, consultar, editar ou excluir uma ordem de servi√ßo.",
    verbose=True
)

# Agente executor que atua com o Baserow
executor = Agent(
    role="Executor de OS",
    goal="Executar a√ß√µes diretamente na base Baserow com base em instru√ß√µes",
    backstory="Respons√°vel por registrar, consultar, editar ou excluir OS conforme os dados extra√≠dos pelo Comandante.",
    verbose=True,
    tools=[executar_acao]  # Importante: esta √© a ferramenta utilizada na task_execucao
)

# Task 0 ‚Äî normaliza√ß√£o da linguagem
task_normalizacao = Task(
    description="""
Voc√™ deve analisar a mensagem abaixo e reescrev√™-la em um dos formatos estruturados a seguir, conforme o tipo de a√ß√£o detectada (registrar, consultar, editar ou excluir OS).

üîπ **Se for um registro**, use:
"Registrar uma nova OS de [tipo de servi√ßo] para o h√≥spede [nome ou nomes], no quarto [n√∫mero], no dia [data] √†s [hor√°rio]. Os detalhes s√£o: [detalhes do pedido]. Ele √© [prioridade opcional]."
(Campos ausentes podem ser preenchidos com '---')

üîπ **Se for uma consulta**, use:
"Consultar OS do h√≥spede [nome ou nomes]" ou, se souber mais detalhes, complemente com "no quarto [n√∫mero]", "no dia [data]", etc.
(N√£o inclua campos com '---' ‚Äî simplesmente omita)

üîπ **Se for uma edi√ß√£o**, use:
"Editar OS do h√≥spede [nome ou nomes], no quarto [n√∫mero], no dia [data], atualizando para: [novos dados]."
(Novamente, omita campos que n√£o estejam claros)

üîπ **Se for uma exclus√£o**, use:
"Excluir OS do h√≥spede [nome ou nomes], no quarto [n√∫mero], no dia [data]."
(Sem campos com '---', apenas os que estiverem presentes)

Mensagem original:
{input}
""",
    expected_output="Mensagem padronizada e sem campos fict√≠cios ('---') para evitar falsos filtros.",
    agent=normalizador
)


# Task 1 ‚Äî interpreta√ß√£o
task_comando = Task(
    description="""
Voc√™ √© um agente especializado em interpretar comandos de gestores para gerar ordens de servi√ßo.

Dado um texto em linguagem natural, identifique qual das seguintes a√ß√µes ele descreve:
- "registrar": inserir uma nova OS na base
- "consultar": buscar dados existentes
- "editar": modificar uma OS existente
- "excluir": apagar uma OS existente

Sua tarefa √© retornar um JSON estruturado com:
- Campo 'acao' (registrar, consultar, editar, excluir)
- Campo correspondente aos dados da a√ß√£o:
  - Para 'registrar': use o campo 'dados'
  - Para 'consultar': use o campo 'filtros'
  - Para 'editar': use os campos 'criterios' e 'novos_dados'
  - Para 'excluir': use o campo 'criterios'

üéØ Exemplos:
---
Entrada:
"Registrar jantar rom√¢ntico para o h√≥spede Rodrigo, quarto 12, dia 28 de junho, √†s 22h. Entrada e prato principal."

Sa√≠da:
{
  "acao": "registrar",
  "dados": {
    "Nome do H√≥spede": "Rodrigo",
    "Quarto": "12",
    "Data do Servi√ßo": "2025-06-28",
    "Hor√°rio do Servi√ßo": "22:00",
    "Tipo de Servi√ßo": "Jantar rom√¢ntico",
    "Detalhes do Pedido": "Entrada e prato principal",
    "Prioridade": "Normal"
  }
}

---
Entrada:
"Excluir o registro do h√≥spede Jo√£o no quarto 5 com servi√ßo de caf√© da manh√£"

Sa√≠da:
{
  "acao": "excluir",
  "criterios": {
    "Nome do H√≥spede": "Jo√£o",
    "Quarto": "5",
    "Tipo de Servi√ßo": "Caf√© da manh√£"
  }
}

---
Entrada:
"Atualizar o servi√ßo do h√≥spede Alejandro para dia 30 de junho e marcar como urgente."

Sa√≠da:
{
  "acao": "editar",
  "criterios": {
    "Nome do H√≥spede": "Alejandro"
  },
  "novos_dados": {
    "Data do Servi√ßo": "2025-06-30",
    "Prioridade": "Urgente"
  }
}

---
Observa√ß√£o:
Se identificar que o h√≥spede √© "cliente habitual" ou "cliente habitue", defina o campo de "Prioridade" como "cliente habitue" e **n√£o adicione o campo "Cliente Habitual".

Agora processe a seguinte mensagem:
{input}
""",
    expected_output="Um JSON no formato especificado contendo a a√ß√£o e os dados.",
    agent=comandante,
    input_key="output"  # recebe o texto normalizado da etapa anterior
)

# Task 2 ‚Äî execu√ß√£o da a√ß√£o com o JSON gerado
task_execucao = Task(
    description="Execute a a√ß√£o na base Baserow com base no JSON fornecido.",
    expected_output="Mensagem confirmando a a√ß√£o ou listando resultados.",
    agent=executor,
    tool=executar_acao,
    input_key="output"
)

# Orquestra√ß√£o da Crew
crew = Crew(
    agents=[normalizador, comandante, executor],
    tasks=[task_normalizacao, task_comando, task_execucao],
    process="sequential"
)

# Fun√ß√£o principal do sistema
def process_message(text):
    try:
        resultado = crew.kickoff(inputs={"input": text})
        return resultado if isinstance(resultado, str) else str(resultado)
    except Exception as e:
        return f"[Erro interno]\n{type(e).__name__}: {e}"

